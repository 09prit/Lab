import java.util.LinkedList;
import java.util.Queue;

class SharedBuffer {
    private final int capacity;
    private final Queue<Integer> buffer = new LinkedList<>();

    public SharedBuffer(int capacity) {
        this.capacity = capacity;
    }

    // Method to add an item to the buffer
    public synchronized void produce(int item) throws InterruptedException {
        while (buffer.size() == capacity) {
            wait(); // Wait if buffer is full
        }
        buffer.add(item);
        System.out.println("Produced: " + item);
        notifyAll(); // Notify all waiting threads
    }

    // Method to remove an item from the buffer
    public synchronized int consume() throws InterruptedException {
        while (buffer.isEmpty()) {
            wait(); // Wait if buffer is empty
        }
        int item = buffer.poll();
        System.out.println("Consumed: " + item);
        notifyAll(); // Notify all waiting threads
        return item;
    }
}

// Producer class
class Producer implements Runnable {
    private final SharedBuffer buffer;

    public Producer(SharedBuffer buffer) {
        this.buffer = buffer;
    }

    @Override
    public void run() {
        try {
            int value = 0;
            while (true) {
                buffer.produce(value++); // Produce an item
                Thread.sleep(100); // Sleep to simulate time taken to produce an item
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}

// Consumer class
class Consumer implements Runnable {
    private final SharedBuffer buffer;

    public Consumer(SharedBuffer buffer) {
        this.buffer = buffer;
    }

    @Override
    public void run() {
        try {
            while (true) {
                buffer.consume(); // Consume an item
                Thread.sleep(150); // Sleep to simulate time taken to consume an item
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}

// Main class to run the producer-consumer scenario
public class ProducerConsumerExample {
    public static void main(String[] args) {
        // Create a shared buffer with a capacity of 5
        SharedBuffer buffer = new SharedBuffer(5);

        // Create and start producer and consumer threads
        Thread producerThread = new Thread(new Producer(buffer));
        Thread consumerThread = new Thread(new Consumer(buffer));

        producerThread.start();
        consumerThread.start();
    }
}

output:

Produced: 0
Consumed: 0
Produced: 1
Consumed: 1
Produced: 2
Consumed: 2
Produced: 3
Consumed: 3
Produced: 4
Consumed: 4
Produced: 5
Produced: 6
Consumed: 5
Produced: 7
Consumed: 6
Produced: 8
Consumed: 7
Produced: 9
Produced: 10
Consumed: 8
Produced: 11
Consumed: 9
Produced: 12
Consumed: 10
...
